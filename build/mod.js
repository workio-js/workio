function c(t){return URL.createObjectURL(new Blob([t],{type:"application/javascript"}))}var u=class{constructor(){this.pool={},this.nextId=0,this.vacantId=[],this.reservedResponse=[]}newTask({resolve:e,reject:n}){let s=null;return this.vacantId.length?(s=this.vacantId[0],this.vacantId.shift()):(s=this.nextId,this.nextId++),this.pool[s]={resolve:e,reject:n},s}setResponse({taskId:e,returnValue:n}){this.pool[e].resolve(n),this.taskGC({taskId:e})}rejectResponse({taskId:e}){this.pool[e].reject("Method not found"),this.taskGC({taskId:e})}taskGC({taskId:e}){this.pool[e]=void 0,e+1===this.nextId?this.nextId--:this.vacantId.push(e)}};var r=globalThis?.process?.release?.name==="node"?"node":globalThis?.Deno!==void 0?"deno":globalThis?.Bun!==void 0?"bun":globalThis?.fastly!==void 0?"fastly":globalThis?.__lagon__!==void 0?"lagon":globalThis?.WebSocketPair instanceof Function?"workerd":globalThis?.EdgeRuntime instanceof String?"edge-light":"other";var l=class{constructor({workerFn:e,constructorConfig:n,constructorArgs:s}){let i=new Worker(c(`(async () => {class WorkioOp {constructor() { }}const ENV = {OP_CLOSE: new WorkioOp()}self.close = function() {return ENV.OP_CLOSE};let sudo = crypto.randomUUID();self.postMessage({ sudo });const publicFunctionInterface = {};self.${r==="node"?"on":"addEventListener"}("message", async ({ data }) => {if(data.constructorArgs) {let sudo = undefined;Object.assign(publicFunctionInterface, await (${e.toString()})(...data.constructorArgs));for(const index in publicFunctionInterface) {if(!(publicFunctionInterface[index] instanceof Function)) {delete publicFunctionInterface[index]}};};if("task" in data) {if(data.task in publicFunctionInterface) {const returnValue = await publicFunctionInterface[data.task](...data.args);self.postMessage({sudo,returnValue,taskId: data.taskId,close: returnValue === ENV.OP_CLOSE,})} else {self.postMessage({ methodNotFound: true, taskId: data.taskId, sudo })}}}, { passive: true });})()`),{type:"module"}),a=new u,f=null;return i.postMessage({constructorArgs:[...s]}),i.addEventListener("message",({data:o})=>{if(o.sudo)switch(f){case null:f=o.sudo;break;case o.sudo:"returnValue"in o&&(a.setResponse(o),o.close===!0&&i.terminate()),o.methodNotFound&&a.rejectResponse(o);break}},{passive:!0}),new Proxy(this,{get(o,h,b){return function(){return new Promise((k,w)=>{let I=a.newTask({resolve:k,reject:w});i.postMessage({task:h,args:[...arguments],taskId:I})})}}})}};var d=class{constructor(e){let n=c(`self.${r==="node"?"on":"addEventListener"}("message", ({ data }) => {})`);return function(){let s=new Worker(n);return new Promise((i,a)=>{s.postMessage})}}};var p=class{constructor(e){}};function m(t){return{as:"as"in t?t.as:"worker",type:"type"in t?t.type:"web",shared:"shared"in t?t.shared:void 0,immidiate:"immidiate"in t?t.immidiate:!1}}var g=class{constructor(e,n){if(!(e instanceof Function))throw new TypeError("workerFn is not a type of function");let s=m(n||{});switch(s.as){case"worker":return class extends l{constructor(){super({workerFn:e,constructorConfig:s,constructorArgs:arguments})}};case"function":return new d(e)}}static config(e){}static import(e){}};r!=="other"&&Object.assign(g,{serve(t){new p(t)}});export{g as Workio};