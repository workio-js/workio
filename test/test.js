/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**/(async function workerTemp() {  class WorkioOp { constructor() { } }  Object.defineProperties(self, { env: { value: Object.defineProperties({}, { type: { value: "function", writable: false, }, op_close: { value: new WorkioOp(), writable: false, }, }), writable: false, }, });  Object.assign(self, {  window: self,  close: () => self.env.op_close,  fetch: ((superFn) => function() { arguments[0] = new URL(arguments[0], import.meta.url); return superFn.apply(this, arguments); })(self.fetch),  });  if("XMLHttpRequest" in globalThis) { XMLHttpRequest.prototype.open = ((superFn) => function() { arguments[1] = new URL(arguments[1], import.meta.url); return superFn.apply(this, arguments); })(XMLHttpRequest.prototype.open); };  let sudoKey = "fEXqvUGRMX55MAYuKoI4Hf3JciwrIqF/+0aGcu+G/AoKkAxkNGfY0r61WQeYP7jHffFUh6itzZ7jD3DhblLXAw==", publicFunctionInterface = {}, initialized = false, pendingTask = [], processTask = async function(data) { if(data.task in publicFunctionInterface) { const returnValue = await publicFunctionInterface[data.task](...data.args); self.postMessage({ sudoKey, returnValue, taskId: data.taskId, close: (returnValue === self.env.op_close), }, (returnValue instanceof ( ArrayBuffer || MessagePort || ReadableStream || WritableStream || TransformStream || AudioData || ImageBitmap || VideoFrame || OffscreenCanvas || RTCDataChannel )? [returnValue] : null)) } else { self.postMessage({ sudoKey, methodNotFound: true, taskId: data.taskId, }) } };  import.meta.url = "http://localhost:3000/test/";  self.addEventListener("message", async ({ data }) => { if(data.workerArgs) { Object.assign(publicFunctionInterface, await (async function() { let sudoKey = undefined, publicFunctionInterface = undefined, pendingTask = undefined, processTask = undefined;  sudoKey; publicFunctionInterface; pendingTask; processTask;  return await (/**/



async ({ max }) => {

	const res = await fetch("./test.js");
	const text = await res.text();
	console.log(text);

	function calc(length) {
		let buffer = 0;
		if(max < length) {
			return 0;
		}
		for(let i = 0; i < length; i++) {
			buffer = i;
		};
		return buffer;
	}

	return { calc, close };

}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**/)(...data.workerArgs)})());initialized = true;pendingTask.forEach(index => processTask(index));pendingTask = [];};if("task" in data) {initialized? processTask(data) : pendingTask.push(data)}}, { passive: true });})()/**/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////